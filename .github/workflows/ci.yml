name: Continuous integration

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  # Test that "cargo package" works. This makes sure it's publishable,
  # since we had issues where "cargo build" worked but "package" didn't.
  package:
    name: Package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - rust-toolchain.toml
          - nightly
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions-rs/cargo@v1
        if: matrix.toolchain == 'rust-toolchain.toml'
        with:
          command: package
      - run: rustup install ${{ matrix.toolchain }}
        if: matrix.toolchain != 'rust-toolchain.toml'
      - uses: actions-rs/cargo@v1
        if: matrix.toolchain != 'rust-toolchain.toml'
        with:
          command: package
          toolchain: ${{ matrix.toolchain }}

  test-versions:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - rust-toolchain.toml
          - nightly
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions-rs/cargo@v1
        if: matrix.toolchain == 'rust-toolchain.toml'
        with:
          command: test
      - run: rustup install ${{ matrix.toolchain }}
        if: matrix.toolchain != 'rust-toolchain.toml'
      - uses: actions-rs/cargo@v1
        if: matrix.toolchain != 'rust-toolchain.toml'
        with:
          command: test
          toolchain: ${{ matrix.toolchain }}

  test-os:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      # - name: install LLVM on Linux
      #   if: matrix.os == 'ubuntu-latest'
      #   run: sudo apt-get install llvm-dev libclang-dev clang
      # - name: install LLVM on Mac
      #   if: matrix.os == 'macOS-latest'
      #   run: brew install llvm
      - run: rustup target add x86_64-pc-windows-msvc
        if: matrix.os == 'windows-latest'
      - uses: actions-rs/cargo@v1
        if: matrix.os == 'windows-latest'
        with:
          command: test
          args: --target x86_64-pc-windows-msvc
      - uses: actions-rs/cargo@v1
        if: matrix.os != 'windows-latest'
        with:
          command: test

  build-nodefault:
    name: Build target ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - wasm32-wasip1
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
          path: crates
      # We use a synthetic crate to ensure no dev-dependencies are enabled, which can
      # be incompatible with some of these targets.
      - name: Copy Rust toolchain into the root for use in synthetic crate setup
        run: cp crates/rust-toolchain.toml .
      - name: Create synthetic crate for testing
        run: cargo init --lib ci-build
      - name: Move Rust toolchain file into synthetic crate
        run: mv rust-toolchain.toml ci-build/
      - name: Copy patch directives into synthetic crate
        run: |
          echo "[patch.crates-io]" >> ./ci-build/Cargo.toml
          cat ./crates/Cargo.toml | sed "0,/.\+\(patch.crates.\+\)/d" >> ./ci-build/Cargo.toml
      - name: Add zcash_script as a dependency of the synthetic crate
        working-directory: ./ci-build
        run: cargo add --no-default-features --path ../crates/zcash_script
      - name: Copy pinned dependencies into synthetic crate
        run: cp crates/Cargo.lock ci-build/
      - name: Add target
        working-directory: ./ci-build
        run: rustup target add ${{ matrix.target }}
      - name: Build for target
        working-directory: ./ci-build
        run: cargo build --verbose --target ${{ matrix.target }}

  build-nostd:
    name: Build target ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - thumbv7em-none-eabihf
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
          path: crates
      # We use a synthetic crate to ensure no dev-dependencies are enabled, which can
      # be incompatible with some of these targets.
      - name: Copy Rust toolchain into the root for use in synthetic crate setup
        run: cp crates/rust-toolchain.toml .
      - name: Create synthetic crate for testing
        run: cargo init --lib ci-build
      - name: Move Rust toolchain file into synthetic crate
        run: mv rust-toolchain.toml ci-build/
      - name: Copy patch directives into synthetic crate
        run: |
          echo "[patch.crates-io]" >> ./ci-build/Cargo.toml
          cat ./crates/Cargo.toml | sed "0,/.\+\(patch.crates.\+\)/d" >> ./ci-build/Cargo.toml
      - name: Add no_std pragma to lib.rs
        run: |
          echo "#![no_std]" > ./ci-build/src/lib.rs
      - name: Add zcash_script as a dependency of the synthetic crate
        working-directory: ./ci-build
        run: cargo add --no-default-features --path ../crates/zcash_script
      - name: Add target
        working-directory: ./ci-build
        run: rustup target add ${{ matrix.target }}
      - name: Build for target
        working-directory: ./ci-build
        run: cargo build --verbose --target ${{ matrix.target }}

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  fuzz:
    name: Fuzz
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - nightly
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - run: cargo install cargo-fuzz
      # TODO: After including opcodes in `script::Error::Interpreter`, the fuzzer started having
      #       memory usage issues. This disables the sanitizer, which avoids those issues. This is a
      #       workaround. An actual fix requires deeper understanding and here are some possibly-
      #       relevant references:
      #
      #     - rust-fuzz/cargo-fuzz#303
      #     - rust-lang/rust#95240
      #     - https://rust-lang.zulipchat.com/#narrow/channel/187780-t-compiler.2Fllvm/topic/Compile.20time.20blowup.20associated.20with.20asan.3F
      - name: build
        run: cargo fuzz build --sanitizer none compare
      - name: fuzz
        run: cargo fuzz run --sanitizer none compare -- -max_len=20000 -max_total_time=100
